
import warnings
warnings.filterwarnings('ignore')

import itertools
import pandas as pd
import math
import matplotlib.pyplot as plt
import numpy as np
import re
import seaborn as sns
import sys

from scipy.stats import spearmanr

# import utils
sys.path.append("../../../utils")
from plotting_utils import *

%matplotlib inline
%config InlineBackend.figure_format = 'svg'
mpl.rcParams['figure.autolayout'] = False

sns.set(**PAPER_PRESET)
fontsize = PAPER_FONTSIZE

np.random.seed(2019)

## note: should probably re-run hESC samples w/o lifted gencode annotations...

rna_seq_dir = "../../../data/03__rna_seq/02__for_DESeq2"

## CHANGE THESE WHEN FILES MOVE
hESC_rep1_f = "/n/rinn_data2/users/kaia/mpra/all_evo_mpra/2019__TSS_evolution_MPRA/misc/06__rna_seq/00__HUES64/04__featurecounts/hESC_rep1.counts.txt"
hESC_rep2_f = "/n/rinn_data2/users/kaia/mpra/all_evo_mpra/2019__TSS_evolution_MPRA/misc/06__rna_seq/00__HUES64/04__featurecounts/hESC_rep2.counts.txt"
mESC_rep1_f = "/n/rinn_data2/users/kaia/mpra/all_evo_mpra/2019__TSS_evolution_MPRA/misc/06__rna_seq/01__mESC/04__featurecounts/mESC_rep1.counts.txt"
mESC_rep2_f = "/n/rinn_data2/users/kaia/mpra/all_evo_mpra/2019__TSS_evolution_MPRA/misc/06__rna_seq/01__mESC/04__featurecounts/mESC_rep2.counts.txt"
mESC_rep3_f = "/n/rinn_data2/users/kaia/mpra/all_evo_mpra/2019__TSS_evolution_MPRA/misc/06__rna_seq/01__mESC/04__featurecounts/mESC_rep3.counts.txt"

orth_f = "../../../misc/01__ensembl_orthologs/ensembl96_human_mouse_orths.txt.gz"

hESC_rep1 = pd.read_table(hESC_rep1_f, skiprows=1)
hESC_rep2 = pd.read_table(hESC_rep2_f, skiprows=1)
hESC_rep1.head()

mESC_rep1 = pd.read_table(mESC_rep1_f, skiprows=1)
mESC_rep2 = pd.read_table(mESC_rep2_f, skiprows=1)
mESC_rep3 = pd.read_table(mESC_rep3_f, skiprows=1)
mESC_rep1.head()

orth = pd.read_table(orth_f)
orth.head()

hESC = hESC_rep1[["Geneid", 
                  "../00__HUES64/03__alignments/hESC_rep1/accepted_hits.bam"]].merge(hESC_rep2[["Geneid",
                                                                                                "../00__HUES64/03__alignments/hESC_rep2/accepted_hits.bam"]],
                                                                                     on="Geneid")
hESC.columns = ["long_gene_id", "rep1", "rep2"]
hESC["gene_id"] = hESC["long_gene_id"].str.split(".", expand=True)[0]
hESC.sample(5)

mESC = mESC_rep1[["Geneid", 
                  "../01__mESC/03__alignments/mESC_rep1/accepted_hits.bam"]].merge(mESC_rep2[["Geneid",
                                                                                              "../01__mESC/03__alignments/mESC_rep2/accepted_hits.bam"]],
                                                                                   on="Geneid").merge(mESC_rep3[["Geneid",
                                                                                                                 "../01__mESC/03__alignments/mESC_rep3/accepted_hits.bam"]],
                                                                                                      on="Geneid")
mESC.columns = ["long_gene_id", "rep1", "rep2", "rep3"]
mESC["gene_id"] = mESC["long_gene_id"].str.split(".", expand=True)[0]
mESC.sample(5)

orth["Mouse homology type"].value_counts()

orth[orth["Gene name"].isin(["POU5F1", "NANOG", 
                             "SOX2", "XIST", "EOMES"])][["Gene stable ID", "Gene name", 
                                                         "Mouse gene stable ID", "Mouse gene name"]].drop_duplicates()

hESC[hESC["gene_id"].isin(["ENSG00000181449", "ENSG00000204531", "ENSG00000163508", "ENSG00000111704"])]

mESC[mESC["gene_id"].isin(["ENSMUSG00000074637", "ENSMUSG00000024406", "ENSMUSG00000032446", "ENSMUSG00000012396"])]

xist_human = "ENSG00000229807"
sry_human = "ENSG00000184895"

xist_mouse = "ENSMUSG00000086503"
sry_mouse = "ENSMUSG00000069036"

hESC[hESC["gene_id"].isin([xist_human, sry_human])]

mESC[mESC["gene_id"].isin([xist_mouse, sry_mouse])]

hESC = hESC[["gene_id", "rep1", "rep2"]].drop_duplicates()
print(len(hESC))
print(len(hESC.gene_id.unique()))
hESC.head()

mESC = mESC[["gene_id", "rep1", "rep2", "rep3"]].drop_duplicates()
print(len(mESC))
print(len(mESC.gene_id.unique()))
mESC.head()

hESC_cols = {"rep1": ["rep1"], "rep2": ["rep2"]}
hESC_cols = pd.DataFrame.from_dict(hESC_cols, orient="index").reset_index()
hESC_cols.columns = ["column", "condition"]
hESC_cols.head()

mESC_cols = {"rep1": ["rep1"], "rep2": ["rep2"], "rep3": ["rep3"]}
mESC_cols = pd.DataFrame.from_dict(mESC_cols, orient="index").reset_index()
mESC_cols.columns = ["column", "condition"]
mESC_cols.head()

orth["Mouse homology type"].value_counts()

# remove many2many orths
orth_sub = orth[orth["Mouse homology type"] != "ortholog_many2many"]
orth_sub.head()

# subset to genes only
orth_genes = orth_sub[["Gene stable ID", "Gene name", "Mouse gene stable ID", "Mouse gene name"]].drop_duplicates()
orth_genes.columns = ["gene_id_human", "gene_name_human", "gene_id_mouse", "gene_name_mouse"]
orth_genes.head()

orth_genes["orth_id"] = orth_genes["gene_id_human"] + "__" + orth_genes["gene_id_mouse"]
orth_genes.head()

hESC_orth = hESC.merge(orth_genes, left_on="gene_id", right_on="gene_id_human")
hESC_orth.head()

hESC_orth = hESC_orth[["orth_id", "rep1", "rep2"]].drop_duplicates()
print(len(hESC_orth))
hESC_orth.head()

mESC_orth = mESC.merge(orth_genes, left_on="gene_id", right_on="gene_id_mouse")
mESC_orth.head()

mESC_orth = mESC_orth[["orth_id", "rep1", "rep2", "rep3"]].drop_duplicates()
print(len(mESC_orth))
mESC_orth.head()

orth_counts = hESC_orth.merge(mESC_orth, on="orth_id", suffixes=("_x", "_y"))
print(len(orth_counts))
orth_counts.columns = ["orth_id", "hESC_rep1", "hESC_rep2", "mESC_rep1", "mESC_rep2", "mESC_rep3"]
orth_counts.head()

orth_cols = {"hESC_rep1": ["hESC", "sample1"], "hESC_rep2": ["hESC", "sample2"], 
             "mESC_rep1": ["mESC", "sample1"], "mESC_rep2": ["mESC", "sample2"], "mESC_rep3": ["mESC", "sample3"]}
orth_cols = pd.DataFrame.from_dict(orth_cols, orient="index").reset_index()
orth_cols.columns = ["column", "condition", "sample"]
orth_cols.head()

hESC.to_csv("%s/hESC_all.counts.txt" % rna_seq_dir, sep="\t", index=False)
mESC.to_csv("%s/mESC_all.counts.txt" % rna_seq_dir, sep="\t", index=False)
hESC_cols.to_csv("%s/hESC_all.cols.txt" % rna_seq_dir, sep="\t", index=False)
mESC_cols.to_csv("%s/mESC_all.cols.txt" % rna_seq_dir, sep="\t", index=False)

orth_counts.to_csv("%s/orths.counts.txt" % rna_seq_dir, sep="\t", index=False)
orth_cols.to_csv("%s/orths.cols.txt" % rna_seq_dir, sep="\t", index=False)


